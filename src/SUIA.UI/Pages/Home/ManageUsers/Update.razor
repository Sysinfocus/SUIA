@inject IAPIService api

@if (Show && model is not null)
{
    <Sheet @ref="@sheet" Show="@Show">
        <div class="flex-col jcsb" style="height: 100%; width: 100%">
            <div class="flex-col" style="flex: 1">
                <div class="flex-col g4 mb1">
                    <h3>Update User</h3>
                    <small class="muted-color">Update user details other than Username and Password</small>
                </div>
                <Input Label="Username" ReadOnly @bind-Value="@model.Username" />
                <Input Label="Email" ReadOnly @bind-Value="@model.Email" />
                <Switch Label="Email Confirmed" Checked="@model.EmailConfirmed" OnClick="x => model.EmailConfirmed = x" />
                <Switch Label="Phone Number Confirmed" Checked="@model.PhoneNumberConfirmed" OnClick="x => model.PhoneNumberConfirmed = x" />
                <Switch Label="Two Factor Auth Enabled" Checked="@model.TwoFactorEnabled" OnClick="x => model.TwoFactorEnabled = x" />
                <Switch Label="Lockout Enabled" Checked="@model.LockoutEnabled" OnClick="x => model.LockoutEnabled = x" />
            </div>
            @if (errorMessage is not null)
            {
                <Alert Title="Update failed" Description="@errorMessage" Icon="error" Type="AlertType.Destructive" />
            }
            <div class="flex g4 jce aic">
                <Button Text="Update" OnClick="HandleUpdate" />
                <Button Text="Cancel" Type="ButtonType.Ghost" OnClick="HandleCancel" />
            </div>
        </div>
    </Sheet>
}
@code {
    [Parameter] public bool Show { get; set; }
    [Parameter] public string? Id { get; set; }
    [Parameter] public EventCallback OnUpdate { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private UserDto? model;
    private Sheet sheet = new();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var result = await api.GetAsync<UserDto>(string.Format(EndpointConstants.GET_USER, Id));
        if (!result.IsSuccess)
        {
            await HandleCancel();
            return;
        }
        model = result.Data;
    }

    private async Task HandleUpdate()
    {
        errorMessage = null;
        if (model is null) return;
        var result = await api.PutAsync<UserDto, IEmpty>(string.Format(EndpointConstants.GET_USER, Id), model);
        if (!result.IsSuccess)
        {
            errorMessage = result.Message;
            return;
        }
        await sheet.Close();
        await OnUpdate.InvokeAsync();
    }

    private async Task HandleCancel()
    {        
        await sheet.Close();
        await OnCancel.InvokeAsync();
    }
}
